# This provider is what will allow Terraform to interface with AWS
provider "aws" {
  region = "$awsregion$"
  # credentials fetched via default provider chain
}


# This module points to the terraform module generated by scalambda.
module "$name$" {
  source = "../target/terraform"

  # This will be the role that your function uses.
  # You can customize how your function gets a role (and much much more) via your build.sbt
  $functionName;format="snake,lower"$_lambda_role_arn = aws_iam_role.basic.arn
}


# The IAM Role for our function to assume
resource "aws_iam_role" "basic" {
  name_prefix = "ScalambdaBasicLambdaRole"
  description = "Role for a HelloWorld Lambda Function created by Scalambda"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
  {
    "Effect": "Allow",
    "Principal": {
      "Service": "lambda.amazonaws.com"
      },
    "Action": "sts:AssumeRole"
  }
  ]
}
EOF
}

# Allow Lambda function to write metrics to XRay
resource "aws_iam_role_policy_attachment" "lambda_xray" {
  role = aws_iam_role.basic.name
  policy_arn = "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
}

# Allow Lambda function to log to CloudWatch
resource "aws_iam_role_policy_attachment" "lambda_logging" {
  role = aws_iam_role.basic.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}